/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <fakemeta_util>
#include <engine>
#include <hamsandwich>
#include <xs>
#include <fun>
#include <cstrike>
#define pragma compress 1
#define PLUGIN "ZFile Object Mission"
#define VERSION "1.0"
#define AUTHOR "Mellowzy"
#define TASK_LASTROUND 2121000000099
new bool:touchtrigger[256]
new const g_vaccine[] = "vaccine"
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_think("obj1", "FL_Think_Obj1")
	RegisterHam(Ham_Spawn, "player", "player_spawnpo",1)
	
	register_clcmd("object_opengate", "dual_exitgate")
	register_clcmd("objrmv", "create_triggerremove")
	register_clcmd("obj2", "create_object2")
}
public plugin_precache()
{
	precache_model("models/rpgrocket.mdl")
	precache_model("models/w_isotopebox.mdl")
	
	#define MAP "standalone_alpha"
	static MapName[64]; get_mapname(MapName, sizeof(MapName))
	
	if(!equal(MapName, MAP))
	{
		set_fail_state("[ZFILE]: You must play in %s", MAP)
		return
	} else {
		server_cmd("mp_timelimit 9999")	
	}
}
public player_spawnpo(id) {
	create_object1(id)
	create_vaccine(id)
}
public create_object1(id)
{
	static Float:Ori3[3]
	new ent = create_entity("info_target")
	Ori3[0] = 1993.0
	Ori3[1] = 3483.0
	Ori3[2] = -1879.0
	entity_set_string(ent, EV_SZ_classname, "obj1")
	entity_set_origin(ent, Ori3)
	entity_set_vector(ent, EV_VEC_origin, Ori3)
	entity_set_edict(ent, EV_ENT_owner, id)
	engfunc(EngFunc_SetSize, ent, Float:{-10.0,-10.0,0.0}, Float:{10.0,10.0,6.0})
	engfunc(EngFunc_SetModel, ent, "models/rpgrocket.mdl")
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_NONE)
	set_rendering(ent, kRenderFxGlowShell, 255, 255,255, kRenderNormal, 1)
	
	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 0.01)
}
public create_object2(id)
{
	static Float:Ori_trigger[3]
	new ent_trigger = create_entity("info_target")
	Ori_trigger[0] = -1596.0
	Ori_trigger[1] = 821.0
	Ori_trigger[2] = -2162.0
	entity_set_string(ent_trigger, EV_SZ_classname, "trigger1")
	entity_set_origin(ent_trigger, Ori_trigger)
	entity_set_vector(ent_trigger, EV_VEC_origin, Ori_trigger)
	entity_set_edict(ent_trigger, EV_ENT_owner, id)
	engfunc(EngFunc_SetSize, ent_trigger, Float:{-10.0,-10.0,0.0}, Float:{10.0,10.0,6.0})
	engfunc(EngFunc_SetModel, ent_trigger, "models/w_isotopebox.mdl")
	entity_set_int(ent_trigger, EV_INT_solid, SOLID_TRIGGER)
	entity_set_int(ent_trigger, EV_INT_movetype, MOVETYPE_NONE)
	set_rendering(ent_trigger, kRenderTransAdd, 255, 255, 255, kRenderTransAdd, 1)
	drop_to_floor(ent_trigger)
	
	RegisterHamFromEntity(Ham_Think, ent_trigger, "trigger_obj_think")
	RegisterHamFromEntity(Ham_Touch, ent_trigger, "trigger_obj_touch",1)
	
	touchtrigger[id] = false
	
	entity_set_float(ent_trigger, EV_FL_nextthink, get_gametime() + 0.01)
}
public dual_exitgate(id)
{
	new Float:Origin1[3]
	Origin1[0] = -2426.0
	Origin1[1] = -28.0
	Origin1[2] = -2169.0
	
	create_exitgate(id, Origin1)
}
public create_exitgate(id, Float:Ori2ss[3])
{
	new ent2ss = create_entity("info_target")
	set_pev(ent2ss, pev_origin, Ori2ss)
	set_pev(ent2ss, pev_classname, "exit_gate")
	set_pev(ent2ss, pev_owner, id)
	engfunc(EngFunc_SetSize, ent2ss, Float:{-10.0,-10.0,0.0}, Float:{10.0,10.0,6.0})
	engfunc(EngFunc_SetModel, ent2ss, "models/w_isotopebox.mdl")
	set_pev(ent2ss, pev_solid, SOLID_TRIGGER)
	set_pev(ent2ss, pev_movetype, MOVETYPE_NONE)
	set_rendering(ent2ss, kRenderTransAdd, 255, 255, 255, kRenderTransAdd, 1)
	drop_to_floor(ent2ss)
	
	RegisterHamFromEntity(Ham_Think, ent2ss, "exitgate_obj_think")
	RegisterHamFromEntity(Ham_Touch, ent2ss, "exitgate_obj_touch",1)
	
	set_pev(ent2ss, pev_nextthink, get_gametime() + 0.01)
}
public create_triggerremove(id)
{
	new Float:Orimov[3],Float:Orimov1[3],Float:Orimov2[3]
	Orimov[0] = 2007.0
	Orimov[1] = 3645.0
	Orimov[2] = -1905.0
	
	Orimov1[0] = 2007.0
	Orimov1[1] = 3610.0
	Orimov1[2] = -1905.0
	
	Orimov2[0] = 2007.0
	Orimov2[1] = 3575.0
	Orimov2[2] = -1905.0
	
	spawn_triggerremove(id, Orimov)
	spawn_triggerremove(id, Orimov1)
	spawn_triggerremove(id, Orimov2)
}
public spawn_triggerremove(id, Float:Orimov[3])
{
	new moving = create_entity("info_target")
	set_pev(moving, pev_origin, Orimov)
	set_pev(moving, pev_classname, "memek")
	set_pev(moving, pev_owner, id)
	engfunc(EngFunc_SetSize, moving, Float:{-10.0,-10.0,0.0}, Float:{10.0,10.0,6.0})
	engfunc(EngFunc_SetModel, moving, "models/w_isotopebox.mdl")
	set_pev(moving, pev_solid, SOLID_TRIGGER)
	set_pev(moving, pev_movetype, MOVETYPE_TOSS)
	set_rendering(moving, kRenderTransAdd, 255, 255, 255, kRenderTransAdd, 1)
	drop_to_floor(moving)
	
	RegisterHamFromEntity(Ham_Think, moving, "p_obj_think")
	RegisterHamFromEntity(Ham_Touch, moving, "p_obj_touch",1)
	
	set_pev(moving, pev_nextthink, get_gametime() + 0.01)
}
public p_obj_think(ent)
{
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "memek")) return
	new id = pev(ent, pev_owner)
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return

	set_pev(ent, pev_nextthink, get_gametime() + 1.0)
}
public p_obj_touch(ent,id)
{
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "memek")) return
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return
	
	server_cmd("remove_pvehammer")
	server_cmd("dapatkankosong")
	
	set_dhudmessage(0,255, 0, -1.0, 0.13, 0, 0.0, 2.5)
	show_dhudmessage(id, "Soy : Oh no, the hammer is broken, I knew it would break")
	
	set_pev(ent, pev_flags, FL_KILLME)
}
public create_vaccine(id)
{
	static Float:Ori2ss[3]
	new ent2ss = create_entity("info_target")
	Ori2ss[0] = 1311.0
	Ori2ss[1] = -518.0
	Ori2ss[2] = -1912.0
	set_pev(ent2ss, pev_origin, Ori2ss)
	set_pev(ent2ss, pev_classname, g_vaccine)
	set_pev(ent2ss, pev_owner, id)
	engfunc(EngFunc_SetSize, ent2ss, Float:{-10.0,-10.0,0.0}, Float:{10.0,10.0,6.0})
	engfunc(EngFunc_SetModel, ent2ss, "models/w_antidote.mdl")
	set_pev(ent2ss, pev_solid, SOLID_TRIGGER)
	set_pev(ent2ss, pev_movetype, MOVETYPE_NONE)
	set_pev(ent2ss, pev_rendermode, kRenderTransAdd)
	set_pev(ent2ss, pev_renderamt, 50.0)
	set_pev(ent2ss, pev_rendercolor, {200.0,200.0,200.0})
	drop_to_floor(ent2ss)
	
	RegisterHamFromEntity(Ham_Think, ent2ss, "vaccine_obj_think")
	RegisterHamFromEntity(Ham_Touch, ent2ss, "vaccine_obj_touch",1)
	
	set_pev(ent2ss, pev_nextthink, get_gametime() + 0.01)
}
public vaccine_obj_think(ent)
{
	new id = pev(ent, pev_owner)
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, g_vaccine)) return
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return
	new iButton = entity_get_int(id, EV_INT_button)
	if(entity_range(ent, id) <= 50.0 && iButton & IN_USE){
		create_object2(id)
		set_dhudmessage(0,255, 0, -1.0, 0.13, 0, 0.0, 3.0)
		show_dhudmessage(id, "Soy : Great, the vaccine, i must keep it!")
		entity_set_int(ent, EV_INT_flags, FL_KILLME)
		remove_entity_name(g_vaccine)
	}

	set_pev(ent, pev_nextthink, get_gametime() + 0.01)
}
public vaccine_obj_touch(ent,id)
{
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, g_vaccine)) return
	
	set_pev(ent, pev_flags, FL_KILLME)
	
}
public exitgate_obj_think(ent)
{
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "exit_gate")) return
	new id = pev(ent, pev_owner)
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return

	set_pev(ent, pev_nextthink, get_gametime() + 1.0)
}
public exitgate_obj_touch(ent,id)
{
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "exit_gate")) return
	if(!pev_valid(ent)) return
	if(!is_user_alive(id)) return
	
	server_cmd("clearround")
	
	set_pev(ent, pev_flags, FL_KILLME)
}
public trigger_obj_think(ent)
{
	if(!is_valid_ent(ent)) return
	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "trigger1")) return
		

	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 0.01)
}
public trigger_obj_touch(ent,id){
	if(!is_valid_ent(ent)) return

	static cls[32]
	entity_get_string(ent, EV_SZ_classname, cls,32)
	if(!equal(cls, "trigger1")) return
	
	touchtrigger[id] = true
	entity_set_int(ent, EV_INT_iuser4, 1)
	server_used(id+990)
	
	set_task(3.0, "last_round", id+TASK_LASTROUND)
	entity_set_int(ent, EV_INT_flags, FL_KILLME)
}
public server_used(id)
{
	id -= 990
	server_cmd("+use")
	if(task_exists(id+990)) remove_task(id+990)
}
public last_round(id)
{
	id -= TASK_LASTROUND
	set_dhudmessage(0,255, 0, -1.0, 0.13, 0, 0.0, 1.5)
	Stock_ScreenFade(id,200,0,0,40)
	shake_screen(id)
	show_dhudmessage(id, "Soy : No way! it's not over yet!")
	if(task_exists(id+TASK_LASTROUND)) set_task(1.5, "last_round2", id+TASK_LASTROUND)
}
public last_round2(id){
	id -= TASK_LASTROUND
	
	server_cmd("lastcheckpoint")
	set_lights("d")
	server_cmd("mp_flashlight 1")
	
	if(task_exists(id+TASK_LASTROUND)) remove_task(id+TASK_LASTROUND)
}
public FL_Think_Obj1(ent)
{
	new id = entity_get_edict(ent, EV_ENT_owner)
	if(!is_valid_ent(ent)) return
	new Float:flBicara = entity_get_float(ent, EV_FL_fuser1)
	if(flBicara && flBicara < get_gametime())
	{
		set_dhudmessage(0,255, 0, -1.0, 0.13, 0, 0.0, 4.0)
		show_dhudmessage(id, "Soy : Is there anything i can use to break the window?")
		entity_set_float(ent, EV_FL_fuser1, 0.0)
		engfunc(EngFunc_RemoveEntity, ent)
	}
	new iButton = entity_get_int(id, EV_INT_button)
	if(entity_range(ent,id) <= 200.0 && iButton & IN_USE){
		set_dhudmessage(0,255, 0, -1.0, 0.13, 0, 0.0, 2.5)
		show_dhudmessage(id, "Soy : The emergency exit is blocked...")
		entity_set_float(ent, EV_FL_fuser1, get_gametime() + 2.5)
	}
	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 0.01)
}
stock Stock_ScreenFade(id,r=200,g=200,b=200,br=0)
{
	if(!is_user_alive(id)) return	
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), {0,0,0}, id)
	write_short((1<<12) * 500)//duration
	write_short((1<<12)) //Hold
	write_short(0x0000) //Type
	write_byte(r) //R
	write_byte(g) //G
	write_byte(b) //B
	write_byte(br) //B
	message_end()
}
stock StopSound(Tiposound)  
{
	if(Tiposound == 1)
		client_cmd(0, "mp3 stop; stopsound");
	else if(Tiposound == 2)
		client_cmd(0, "stopsound"); 
}
stock shake_screen(id)
{
	if(!id) 
	{
		message_begin(MSG_BROADCAST, get_user_msgid("ScreenShake"))
		write_short(8<<12)
		write_short(5<<12)
		write_short(4<<12)
		message_end()
	} 
	else 
	{
		if(!is_user_connected(id) || !is_user_alive(id))
			return
			
		message_begin(MSG_BROADCAST, get_user_msgid("ScreenShake"), _, id)
		write_short(8<<12)
		write_short(5<<12)
		write_short(4<<12)
		message_end()
	}
}
